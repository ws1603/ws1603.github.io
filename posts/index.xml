<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 小松的学习笔记</title>
    <link>https://wangsong.site/posts/</link>
    <description>Recent content in Posts on 小松的学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Sat, 14 Mar 2020 20:20:16 +0800</lastBuildDate>
    
	<atom:link href="https://wangsong.site/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浅析URL</title>
      <link>https://wangsong.site/posts/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Sat, 14 Mar 2020 20:20:16 +0800</pubDate>
      
      <guid>https://wangsong.site/posts/%E6%B5%85%E6%9E%90url/</guid>
      <description>URL的组成及作用 URL(Uniform Resource Locator,统一资源定位符)的组成：
协议+域名或IP+端口号+路径+查询字符串+锚点
协议 http(HyperText Transfer Protocol)/https(HyperText Transfer Protocol Secure),规定请求的格式是什么，响应的格式是什么。
http不是安全的，而且攻击者可以通过监听和中间人攻击等手段，获取网站帐户和敏感信息等。
https的设计可以防止前述攻击，在正确配置时是安全的。
IP地址 IP地址(Internet Protocol Address)，是分配给网络上使用网际协议的设备的数字标签。
IP地址主要有两个功能：标识主机或网络 和 寻址。
域名 域名，是一个IP地址的别称，目的是为了便于记忆后者。wikipedia.org是一个域名，和IP地址208.80.152.2相对应。人们可以直接访问wikipedia.org来代替IP地址，然后域名系统（DNS）就会将它转化成便于机器识别的IP地址。这样，人们只需要记忆wikipedia.org这一串带有特殊含义的字符，而不需要记忆没有含义的数字。
一个域名可以对应不同的IP，这个叫做均衡负载。
一个IP可以对应不同的域名，这个叫做主机共享。
注意www.baidu.com和baidu.com并不是同一个域名。 com是顶级域名 baidu.com是二级域名(俗称一级域名) www.baidu.com是三级域名(俗称二级域名) 它们是父子关系 www.xxx.com和xxx.com可以是同一家公司，也可以不是。  端口 端口(port)，在电脑网络中是一种经由软件创建的服务，在一个电脑操作系统中扮演通信的端点（endpoint）。每个端口都会与主机的IP地址及通信协议关联。端口以16比特数字来表示，这被称为端口编号（port number）。
一共有65535个端口，0到1023(2的10次方减1)号端口是留给系统使用的，要使用这1024个端口需要提供管理员权限。如果一个端口被占用，就只能使用另一个端口。
http默认使用80端口
https默认使用443端口
http-server默认使用8080端口
总之，IP和端口是缺一不可的。
路径 在IP/域名或端口号后通过路径可以访问到具体的页面，通过不同的路径请求不同的页面。
查询参数 查询参数可以使得同一个页面访问不同内容。
锚点 锚点，可以使得同一个内容跳转到不同的位置。
DNS的作用及nslookup命令 IP和域名是通过DNS对应起来的。
DNS(Domain Name System)，是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，可将域名转换成IP地址，使人们可以使用域名更方便地访问互联网。
nslookup是许多计算机操作系统中可用的网络管理命令行工具，用于查询域名系统以获得域名或IP地址映射或其他DNS记录。
IP的作用及ping命令 IP的作用 Internet Protocal主要约定了两件事：
1. 标识主机。更具体地说，标识其网络接口，并且提供主机在网络中的位置。
2. 网络寻址。 网际协议(IP)的一个重要机制就是网络寻址(internet address)。该功能的目的是将数据报从一个网络模块 送到 目的地。在发送的整个过程，IP地址(address)充当着目的地的位置，域名(name)意味着我们要找什么，路由(route)代表着如何到达目的地的这个过程。每个IP数据包的标头包含了发送主机的IP地址和目的主机的IP地址。
ping命令 ping是一种计算机网络工具，用来测试数据包能否透过IP协议到达特定主机。ping的运作原理是向目标主机传出一个ICMP的请求回显数据包，并等待接收回显回应数据包。程序会按时间和成功响应的次数估算丢失数据包率(丢包率)和数据包往返时间(网络时延，Round-trip delay time)。</description>
    </item>
    
    <item>
      <title>多线程的基本原理</title>
      <link>https://wangsong.site/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 23 Dec 2019 15:29:42 +0800</pubDate>
      
      <guid>https://wangsong.site/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
      <description>为什么要使用多线程？ CPU的速度是非常快的，例如一个3GHz的CPU做一件事的时间是0.3ns，但是内存的读取速度大概在100ns，磁盘读取的速度更是慢到10ms。这就意味着CPU在读取内存或硬盘的这段时间只能等待，浪费了太多时间，可参考让 CPU 告诉你硬盘和网络到底有多慢。
默认情况下，我们执行的程序只有一个线程，这让处理问题非常自然，但是却有严重的性能问题，因为Java执行模型是同步/阻塞的，只有在执行完一行代码后才能执行下一行代码，遇上I/O等速度慢的操作，CPU的效率将大打折扣。
解决的方法便是使用多线程，让CPU用等待的时间去做其他的事，尽可能提升CPU的效率。
多线程带来的性能提升，对于IO密集型应用极有作用，包括网络IO(通常包括数据库)、文件IO；而对于CPU密集型应用的作用作用就不那么明显了。
性能提升的上限： 单核CPU 100% ， 多核CPU N*100%
使用Thread时应注意 Java中只有这么一种方法代表线程 使用start()方法才能并发执行 每多开一个线程，就多一个执行流 每个方法栈(局部变量)是线程私有的 静态变量/类变量是被所有线程共享的  多线程带来的问题及解决方法  线程难的本质原因是你要看着同一份代码，想象不同的人在疯狂地以乱序执行它。
 多个线程访问共享变量，由于访问是乱序的，如果对共享变量的操作不是原子的，就可能会导致得到错误的结果。
例如： i++这件事不是一个原子操作，它有三个操作：
取i的值
把i的值加一
把修改后的值写回i
如果当某个线程执行到把i的值加一还没来得及写回i，分配的时间片就用完了，CPU转而执行其他线程时取的i的值还是原先的值，这也就意味着i++操作执行了两次但i实际上只加了一次，于是导致最终结果出错。
这种多个线程对同一个对象中的同一个实例变量进行操作时出现的值被更改、值不同步的情况，进而影响程序的执行流程的行为称为非线程安全。
解决线程非安全的办法是在某个方法前加上synchronized关键字修饰，使多个线程在执行此方法时，以排队的方式进行处理。当一个线程调用此方法前，先判断这个方法有没有被上锁，如果上锁，说明有其他线程正在调用这个方法，必须等其他线程对这个方法调用结束后才可以执行这个方法。这样也就实现了排队调用这个方法的目的，达到了按顺序对 count 变量减 1 的效果。synchronized 可以在任意对象及方法上加锁，而加锁的这段代码称为“互斥区” 或“临界区”。
 synchronized public void method() { count--; //do something else }  synchronized 不仅可以用到同步方法，也可以用到同步块。对于同步块，synchronized 获取的是参数中的对象锁。
public void method() { Object obj=new Object(); synchronized(obj) { count--; //do something else } }  当一个线程想要执行同步方法里面的代码时，线程首先尝试去拿这把锁，如果能够拿到锁，那么这个线程就可以执行 synchronize 里面的代码。如果不能拿到锁，那么这个线程就会不断地尝试拿锁，直到能够拿到为止，而且有多个线程同时去争抢这把锁。</description>
    </item>
    
    <item>
      <title>Collection体系的常用类及其背后的数据结构</title>
      <link>https://wangsong.site/posts/collection%E4%BD%93%E7%B3%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%8F%8A%E5%85%B6%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 27 Nov 2019 22:55:04 +0800</pubDate>
      
      <guid>https://wangsong.site/posts/collection%E4%BD%93%E7%B3%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%8F%8A%E5%85%B6%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>集合 Collection 存储的都是value对象 List 有序可重复 Set 无序无重复 Map 存储的是key-value形式的对象，key无序无重复，value无序可重复 有序：添加进去的元素与取得元素的顺序一致。注意不是集合自己的顺序 重复：两个对象元素一致  集合框架的接口 集合框架中的类 常见的集合 List接口 ArrayList
一种可以动态增长和缩减的索引队列，其底层为一个动态数组，适合随机访问不适合插入删除，初始容量为10，可以自动扩容。
LinkedList
一种可以在任何位置进行高效地插入和删除的有序队列，为一个双向链表，适合插入和删除不适合随机访问。
Vector
与ArrayList相似，是一个动态数组，操作与ArrayList相同，不同的是Vector是线程同步的(synchronized)，安全性高，效率低。
Stack
栈，继承自Vector，特性是后进先出。
Set接口 HashSet
一种没有重复元素的集合，是线程非同步的，底层为HashMap。
无重复原则:通过equals()和HashCode()判断，判断重复则拒绝存入。
TreeSet
一种有序的集合，基于TreeMap实现，其排序为自然排序或根据compareTo排序，当存入自己写的类时需要先实现compareTo接口。
Map接口 HashMap
存储键值对(key-value)映射的散列表，不同的key可以存储相同的value，key若有相同则将原有的value覆盖而不是拒绝存入(跟Set刚好相反)。
TreeMap
存储键值对有序排列的集合，基于红黑树实现，根据自然排序或compareTo排序。</description>
    </item>
    
    <item>
      <title>Java、Maven的包管理</title>
      <link>https://wangsong.site/posts/javamaven%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 29 Oct 2019 11:53:59 +0800</pubDate>
      
      <guid>https://wangsong.site/posts/javamaven%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
      <description> Java的包管理机制 包管理的本质就是告诉JVM如何找到所需的第三方类库，以及成功地解决其中的冲突问题。
JVM的包管理机制非常简单：
 JVM一辈子只干一件事，读字节码文件，执行字节码。 每当JVM看到一个全限定类名，就尝试从classpath中加载。  要找一个类就在-classpath所指定的jar包(一堆类的压缩包)或文件夹中按照全限定类名(目录层级)挨个查找，找到为止，找不到就会丢出一个ClassNotFoundExeption。
当多个同名类同时出现在classpath中，JVM就只会加载放在前面的类，导致了放在后面的想要使用的类得不到使用，这就是Classpath hell。
由于传递性依赖，我们依赖的类可能还依赖类其他的类，classpath中会将所有依赖的类引用进来，这就导致classpath非常长，要解决Classpath hell，人工寻找classpath中的同名类非常困难，这就需要借助自动化工具来实现。
Maven的包管理机制 Maven的仓库
 Maven的中央仓库：按照一定的约定存储包 Maven的本地仓库：默认位于~/.m2,下载的第三方包放在这里进行缓存  Maven按照约定为所有的包编号：groupId/artifactId/version，方便检索。
当我们需要一个包时，Maven按照我们给出的编号，去仓库查找这个包，并根据依赖找到所有的包下载到本地，然后拼接成一个很长的classpath，以供JVM查找加载。
作为依赖性的自动管理工具，Maven绝对不允许最终的classpath出现同名不同版本的jar包，其解决依赖冲突的原则是：距离本项目最近的胜出 。 但这一原则并不能总是让我们得到需要的包，当看到这些异常的的时候，说明Maven解决不了这个包冲突，需要靠手动解决。
AbstractMethodError NoClassDefFoundError ClassNotFoundException LinkageError  包管理冲突的解决 以运行一个程序得到如下异常为例:
首先对冲突的包进行定位，可以从Maven的Dependency中找到对应的两个包，可以看到此项目中只有两个org.springframework:spring-web的包，5.1.8版本不受其他包所依赖，距离本项目较4.3.6版本更近，所以Maven是采用了5.1.8版本，所以我们可以很快地定位到运行项目缺失的类方法是在4.3.6版本中。
但是，如果这里发生冲突的包不止有两个呢？这时，就需要到Maven的中央仓库去查看源码进行定位了。
定位到了发生冲突的包，那么接下来就该解决问题了。
方法一 在最近处添加一个新的包 在pom.xml文件中引入一个4.3.6版本的dependency即可
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.3.6.RELEASE&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;  方法二 消除与其冲突的包 如果5.1.8版本包不被其他包所依赖，直接在pom.xml文件中将其dependency删去或者注释掉即可；如果5.1.8版本包受其他包所依赖，可在上级包的dependency中添加如下内容即可将5.1.8版本包从其中排除不受依赖。
&amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt;  </description>
    </item>
    
    <item>
      <title>如何使用Hugo搭建个人博客</title>
      <link>https://wangsong.site/posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 28 Oct 2019 10:55:57 +0800</pubDate>
      
      <guid>https://wangsong.site/posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>Hugo是由Go语言实现的静态网站生成器，可以快速搭建一套静态展示类型的网站。并且自带高性能服务器，热部署等特性，是不想多花精力又想构建个人博客的极佳选择。本文将介绍如何使用Hugo搭建个人博客及如何发布到Github并生成Github pages。
快速搭建博客 进入Hugo 官网，点击Quick Start快速开始。
安装Hugo Windows安装方式  去Hugo releases页面下载hugo_xxx_Windows-64bit.zip 解压，把hugo.exe放到D:\Software\hugo\hugo.exe 把D:\Software\hugo加到PATH 重启终端，运行hugo version 查看版本  Mac安装方式  brew install hugo hugo version  建立新站点 输入命令
hugo new site github.io-creator  在当前文件夹中创建一个新的Hugo网站github.io-creator。
添加主题 依次输入下面四条命令，下载并使用主题ananke。
cd github.io-creator git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml  更换主题可到Hugo的官方网站浏览下载。
创建文章 输入命令
hugo new posts/我的博客.md  Hugo会在content目录下创建post目录，在post目录下创建scala-learning-pattern-matching.md文件。之后打开md文件，里面已经有些内容：
这里的的draft默认状态为true,需要修改为false才能发布。
查看生成的文章 草稿状态下 输入命令hugo server -D
非草稿状态下 输入hugo server
可得到如下结果：</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://wangsong.site/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangsong.site/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>a 标签 属性  href target download rel=noopener  作用  跳转外部页面 跳转内部锚点 跳转到邮箱或电话等  a 的 href 的取值 网址  https://google.com http://google.com //google.com  路径  /a/b/c 以及 a/b/c index.html 以及 ./index.html  伪协议  javascript:代码; mailto:邮箱 tel:手机号 (注意逗号和分号)  id  href=#xxx  注：href=&amp;ldquo;javascript:;&amp;rdquo; 什么都不做的伪协议，点击后页面不会刷新，也不会回到顶部
href=&amp;ldquo;#xxx&amp;rdquo; 跳转到指定 id 的标签
a 的 target 的取值 内置名字  _blank 在新的页面打开 _top 最顶层页面打开 _parent 在父级页面打开 _self 默认值，在当前页面打开  程序员命名  window 的 name iframe 的 name  a 的 download 作用  不是打开页面，而是下载页面  问题  不是所有浏览器都支持，尤其是手机浏览器不可能支持  table 标签 相关的 table  table thead tbody tfoot tr td th  table 标签里面只能使用三个标签 thead tbody tfoot</description>
    </item>
    
  </channel>
</rss>