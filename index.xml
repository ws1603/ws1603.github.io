<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小松的学习笔记</title>
    <link>https://wangsong.site/</link>
    <description>Recent content on 小松的学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Thu, 02 Apr 2020 20:29:52 +0800</lastBuildDate>
    
	<atom:link href="https://wangsong.site/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>踩坑记录</title>
      <link>https://wangsong.site/problems/problems/</link>
      <pubDate>Thu, 02 Apr 2020 20:29:52 +0800</pubDate>
      
      <guid>https://wangsong.site/problems/problems/</guid>
      <description> WMVirtualbox/Docker 问题描述：
Docker无法切换到linux containers。  如何解决：
 发现windows的hyper-V与WMVirtuabox的虚拟化相冲突，使用Docker需要开启hyper-V，在bios的虚拟化启用后需要在windows开启hyper-V和hypervisorlaunchtype。 1.Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V –All， Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All。 2.管理员身份打开提示符，输入命令bcdedit /set hypervisorlaunchtype auto 开启， bcdedit /set hypervisorlaunchtype off 关闭，重启电脑。  Redis 问题描述：
使用Docker开启的Redis容器在使用时报错不能反序列化，某某类找不到。  如何解决：
初学Redis，发现上一个项目也是使用的此Redis容器，两个项目中有一个相同类名的类。猜测是Redis中存了上一个项目中的类，在此项目中遇到了同名的类后会就拒绝存入，在使用到此类时发现类的数据与原先存入的类不相符，于是报错。 在Docker中重新开启一个Redis容器使用，问题得以解决。(如何删除Redis中的数据有待学习)  FreeMarker 问题描述：
使用FreeMarker渲染时遇到数值的空值处理报错。  如何解决：
将空值处理的默认值设置为0(${RankItem.amount!0})，还是报错。后来发现RankItem类中的amount类型被设成了Integer，改为int后可以正常显示。  </description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>https://wangsong.site/posts/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Sat, 14 Mar 2020 20:20:16 +0800</pubDate>
      
      <guid>https://wangsong.site/posts/%E6%B5%85%E6%9E%90url/</guid>
      <description>URL的组成及作用 URL(Uniform Resource Locator,统一资源定位符)的组成：
协议+域名或IP+端口号+路径+查询字符串+锚点
协议 http(HyperText Transfer Protocol)/https(HyperText Transfer Protocol Secure),规定请求的格式是什么，响应的格式是什么。
http不是安全的，而且攻击者可以通过监听和中间人攻击等手段，获取网站帐户和敏感信息等。
https的设计可以防止前述攻击，在正确配置时是安全的。
IP地址 IP地址(Internet Protocol Address)，是分配给网络上使用网际协议的设备的数字标签。
IP地址主要有两个功能：标识主机或网络 和 寻址。
域名 域名，是一个IP地址的别称，目的是为了便于记忆后者。wikipedia.org是一个域名，和IP地址208.80.152.2相对应。人们可以直接访问wikipedia.org来代替IP地址，然后域名系统（DNS）就会将它转化成便于机器识别的IP地址。这样，人们只需要记忆wikipedia.org这一串带有特殊含义的字符，而不需要记忆没有含义的数字。
一个域名可以对应不同的IP，这个叫做均衡负载。
一个IP可以对应不同的域名，这个叫做主机共享。
注意www.baidu.com和baidu.com并不是同一个域名。 com是顶级域名 baidu.com是二级域名(俗称一级域名) www.baidu.com是三级域名(俗称二级域名) 它们是父子关系 www.xxx.com和xxx.com可以是同一家公司，也可以不是。  端口 端口(port)，在电脑网络中是一种经由软件创建的服务，在一个电脑操作系统中扮演通信的端点（endpoint）。每个端口都会与主机的IP地址及通信协议关联。端口以16比特数字来表示，这被称为端口编号（port number）。
一共有65535个端口，0到1023(2的10次方减1)号端口是留给系统使用的，要使用这1024个端口需要提供管理员权限。如果一个端口被占用，就只能使用另一个端口。
http默认使用80端口
https默认使用443端口
http-server默认使用8080端口
总之，IP和端口是缺一不可的。
路径 在IP/域名或端口号后通过路径可以访问到具体的页面，通过不同的路径请求不同的页面。
查询参数 查询参数可以使得同一个页面访问不同内容。
锚点 锚点，可以使得同一个内容跳转到不同的位置。
DNS的作用及nslookup命令 IP和域名是通过DNS对应起来的。
DNS(Domain Name System)，是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，可将域名转换成IP地址，使人们可以使用域名更方便地访问互联网。
nslookup是许多计算机操作系统中可用的网络管理命令行工具，用于查询域名系统以获得域名或IP地址映射或其他DNS记录。
IP的作用及ping命令 IP的作用 Internet Protocal主要约定了两件事：
1. 标识主机。更具体地说，标识其网络接口，并且提供主机在网络中的位置。
2. 网络寻址。 网际协议(IP)的一个重要机制就是网络寻址(internet address)。该功能的目的是将数据报从一个网络模块 送到 目的地。在发送的整个过程，IP地址(address)充当着目的地的位置，域名(name)意味着我们要找什么，路由(route)代表着如何到达目的地的这个过程。每个IP数据包的标头包含了发送主机的IP地址和目的主机的IP地址。
ping命令 ping是一种计算机网络工具，用来测试数据包能否透过IP协议到达特定主机。ping的运作原理是向目标主机传出一个ICMP的请求回显数据包，并等待接收回显回应数据包。程序会按时间和成功响应的次数估算丢失数据包率(丢包率)和数据包往返时间(网络时延，Round-trip delay time)。</description>
    </item>
    
    <item>
      <title>多线程的基本原理</title>
      <link>https://wangsong.site/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 23 Dec 2019 15:29:42 +0800</pubDate>
      
      <guid>https://wangsong.site/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
      <description>为什么要使用多线程？ CPU的速度是非常快的，例如一个3GHz的CPU做一件事的时间是0.3ns，但是内存的读取速度大概在100ns，磁盘读取的速度更是慢到10ms。这就意味着CPU在读取内存或硬盘的这段时间只能等待，浪费了太多时间，可参考让 CPU 告诉你硬盘和网络到底有多慢。
默认情况下，我们执行的程序只有一个线程，这让处理问题非常自然，但是却有严重的性能问题，因为Java执行模型是同步/阻塞的，只有在执行完一行代码后才能执行下一行代码，遇上I/O等速度慢的操作，CPU的效率将大打折扣。
解决的方法便是使用多线程，让CPU用等待的时间去做其他的事，尽可能提升CPU的效率。
多线程带来的性能提升，对于IO密集型应用极有作用，包括网络IO(通常包括数据库)、文件IO；而对于CPU密集型应用的作用作用就不那么明显了。
性能提升的上限： 单核CPU 100% ， 多核CPU N*100%
使用Thread时应注意 Java中只有这么一种方法代表线程 使用start()方法才能并发执行 每多开一个线程，就多一个执行流 每个方法栈(局部变量)是线程私有的 静态变量/类变量是被所有线程共享的  多线程带来的问题及解决方法  线程难的本质原因是你要看着同一份代码，想象不同的人在疯狂地以乱序执行它。
 多个线程访问共享变量，由于访问是乱序的，如果对共享变量的操作不是原子的，就可能会导致得到错误的结果。
例如： i++这件事不是一个原子操作，它有三个操作：
取i的值
把i的值加一
把修改后的值写回i
如果当某个线程执行到把i的值加一还没来得及写回i，分配的时间片就用完了，CPU转而执行其他线程时取的i的值还是原先的值，这也就意味着i++操作执行了两次但i实际上只加了一次，于是导致最终结果出错。
这种多个线程对同一个对象中的同一个实例变量进行操作时出现的值被更改、值不同步的情况，进而影响程序的执行流程的行为称为非线程安全。
解决线程非安全的办法是在某个方法前加上synchronized关键字修饰，使多个线程在执行此方法时，以排队的方式进行处理。当一个线程调用此方法前，先判断这个方法有没有被上锁，如果上锁，说明有其他线程正在调用这个方法，必须等其他线程对这个方法调用结束后才可以执行这个方法。这样也就实现了排队调用这个方法的目的，达到了按顺序对 count 变量减 1 的效果。synchronized 可以在任意对象及方法上加锁，而加锁的这段代码称为“互斥区” 或“临界区”。
 synchronized public void method() { count--; //do something else }  synchronized 不仅可以用到同步方法，也可以用到同步块。对于同步块，synchronized 获取的是参数中的对象锁。
public void method() { Object obj=new Object(); synchronized(obj) { count--; //do something else } }  当一个线程想要执行同步方法里面的代码时，线程首先尝试去拿这把锁，如果能够拿到锁，那么这个线程就可以执行 synchronize 里面的代码。如果不能拿到锁，那么这个线程就会不断地尝试拿锁，直到能够拿到为止，而且有多个线程同时去争抢这把锁。</description>
    </item>
    
    <item>
      <title>线程join方法、死锁、Timer等</title>
      <link>https://wangsong.site/notes/%E7%BA%BF%E7%A8%8Bjoin%E6%96%B9%E6%B3%95%E6%AD%BB%E9%94%81timer%E7%AD%89/</link>
      <pubDate>Sat, 30 Nov 2019 17:13:37 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E7%BA%BF%E7%A8%8Bjoin%E6%96%B9%E6%B3%95%E6%AD%BB%E9%94%81timer%E7%AD%89/</guid>
      <description>比较重要的方法 join&amp;mdash;-&amp;gt;Thread类
设计一个模型</description>
    </item>
    
    <item>
      <title>登录</title>
      <link>https://wangsong.site/notes/%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Thu, 28 Nov 2019 15:36:34 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/</guid>
      <description>import java.util.ArrayList; import java.util.HashMap; import java.util.Iterator; // import java.util.HashSet; // import java.util.TreeSet; // public class Main{ // public static void main(String[] args) { // // HashSet&amp;lt;String&amp;gt; stringSet = new HashSet(); // // stringSet.add(&amp;quot;a&amp;quot;); // // stringSet.add(&amp;quot;a&amp;quot;); // // stringSet.add(&amp;quot;a&amp;quot;); // // System.out.println(stringSet.size());//输出1 // // HashSet&amp;lt;Person&amp;gt; personSet = new HashSet(); // // personSet.add(new Person(&amp;quot;b&amp;quot;,1)); // // personSet.add(new Person(&amp;quot;b&amp;quot;,2)); // // personSet.add(new Person(&amp;quot;b&amp;quot;,3)); // // System.out.println(personSet.size());//输出3 // // System.out.println(personSet.iterator().next().getNum());//输出为1 // TreeSet&amp;lt;Person&amp;gt; pts = new TreeSet(); // pts.</description>
    </item>
    
    <item>
      <title>Collection体系的常用类及其背后的数据结构</title>
      <link>https://wangsong.site/posts/collection%E4%BD%93%E7%B3%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%8F%8A%E5%85%B6%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 27 Nov 2019 22:55:04 +0800</pubDate>
      
      <guid>https://wangsong.site/posts/collection%E4%BD%93%E7%B3%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%8F%8A%E5%85%B6%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>集合 Collection 存储的都是value对象 List 有序可重复 Set 无序无重复 Map 存储的是key-value形式的对象，key无序无重复，value无序可重复 有序：添加进去的元素与取得元素的顺序一致。注意不是集合自己的顺序 重复：两个对象元素一致  集合框架的接口 集合框架中的类 常见的集合 List接口 ArrayList
一种可以动态增长和缩减的索引队列，其底层为一个动态数组，适合随机访问不适合插入删除，初始容量为10，可以自动扩容。
LinkedList
一种可以在任何位置进行高效地插入和删除的有序队列，为一个双向链表，适合插入和删除不适合随机访问。
Vector
与ArrayList相似，是一个动态数组，操作与ArrayList相同，不同的是Vector是线程同步的(synchronized)，安全性高，效率低。
Stack
栈，继承自Vector，特性是后进先出。
Set接口 HashSet
一种没有重复元素的集合，是线程非同步的，底层为HashMap。
无重复原则:通过equals()和HashCode()判断，判断重复则拒绝存入。
TreeSet
一种有序的集合，基于TreeMap实现，其排序为自然排序或根据compareTo排序，当存入自己写的类时需要先实现compareTo接口。
Map接口 HashMap
存储键值对(key-value)映射的散列表，不同的key可以存储相同的value，key若有相同则将原有的value覆盖而不是拒绝存入(跟Set刚好相反)。
TreeMap
存储键值对有序排列的集合，基于红黑树实现，根据自然排序或compareTo排序。</description>
    </item>
    
    <item>
      <title>生产者消费者模型</title>
      <link>https://wangsong.site/notes/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sun, 24 Nov 2019 10:40:12 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</guid>
      <description>购票的小例子
利用Vector几何 线程安全 多个线程并发操作一个集合的时候 不会抢夺资源
public class Warehouse { //单例设计模式 //仓库里的集合 存放元素 private ArrayList&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); //相机和内添加元素的方法 public void add(){ if(list.size()&amp;lt;20) { list.add(&amp;quot;a&amp;quot;); }else{ return ; //让方法执行到这里就结束方法 } } //从集合内获取元素的方法 public void get(){ if(list.size()&amp;gt;0){ list.remove(0);//集合越界的问题 }else{ return; } }  public class Consumer extends Thread{ //为了保证生产者 和消费者使用同一个仓库对象 天界一个属性 private Warehouse house; public Consumer(Warehouse house) { this.house = house; } //消费者的方法 一直从仓库内获取元素 @Override public void run(){ while(true){ house.get(); System.out.println(&amp;quot;消费者拿走了一件货物&amp;quot;); try { Thread.</description>
    </item>
    
    <item>
      <title>线程</title>
      <link>https://wangsong.site/notes/%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sat, 23 Nov 2019 20:09:07 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E7%BA%BF%E7%A8%8B/</guid>
      <description>程序
可以理解为是一组静态的代码
进程
正在进行的程序 静态的代码 运行起来 线程
正在执行程序中的小单元
1.主线程 系统线程
2.用户线程 main
3.守护线程(精灵) GC
线程&amp;mdash;&amp;mdash;-操作系统级别 CPU 如何在Java中创建线程 让线程执行 多线程
掌握每一个线程的集中不同的状态 及状态之间如何切换
创建线程&amp;mdash;&amp;ndash;就绪状态&amp;mdash;&amp;mdash;执行状态&amp;mdash;&amp;ndash;等待/挂起&amp;mdash;&amp;mdash;-异常/死亡 new&amp;mdash;&amp;mdash;&amp;ndash;start&amp;mdash;&amp;mdash;&amp;mdash;CPU分配run()&amp;mdash;&amp;mdash;&amp;ndash;wait()&amp;mdash;&amp;mdash;&amp;ndash;exception over notify/notifyAll
实现线程的过程 1 1.自己描述一个类
2.继承一个父类Thread
3.重写run方法
4.new一个线程对象 调用start()方法 让线程进入就绪状态
实现一个跑步的小例子
多个人同时跑步
public class runner extends Thread{ private String name; runner(String name){ this.name = name; } @Override public void run(){ for(int i=0;i&amp;lt;10;i++){ System.out.println(name+&amp;quot;已经跑了&amp;quot;+i+&amp;quot;米啦&amp;quot;); } } public static void main(String[] args) { runner r1 = new runner(&amp;quot;张3&amp;quot;); runner r2 = new runner(&amp;quot;李4&amp;quot;); runner r3 = new runner(&amp;quot;王5&amp;quot;); runner r4 = new runner(&amp;quot;赵6&amp;quot;); r1.</description>
    </item>
    
    <item>
      <title>缓冲流&#43;对象流</title>
      <link>https://wangsong.site/notes/%E7%BC%93%E5%86%B2%E6%B5%81&#43;%E5%AF%B9%E8%B1%A1%E6%B5%81/</link>
      <pubDate>Sat, 23 Nov 2019 15:30:51 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E7%BC%93%E5%86%B2%E6%B5%81&#43;%E5%AF%B9%E8%B1%A1%E6%B5%81/</guid>
      <description>缓冲流
在流管道内增加缓存的数据，让我们使用数据读取的文字更加流畅
高级流&amp;mdash;-&amp;gt;创建通过低级流
BufferedInputStream/BufferedOutputStream
BufferedReader/BufferedWriter
BufferedInputStream构建方式 使用低级流构建
基本使用与低级流的方法完全一致
read() skip() available()
BufferedOutputStream构建方式 使用低级流构建 注意 缓冲流构建的时候没有boolean类型的参数
使用方法与低级流的方法完全一致
write() flush() close()
数组 集合&amp;mdash;-&amp;gt;临时性的存储 都存在内存中 文件&amp;mdash;&amp;ndash;&amp;gt;永久性的存储 存储在硬盘上
BufferedReader String value = readLine();
BufferedWriter
write(String) newLine()
//设计一个方法 用来用户登录验证 public String login(String userName,String password){ //真实的名字和密码 永久的存在数据库---&amp;gt;数据持久化 //文件我们采用.txt形式的纯文本 文本的内容以行为单位 每一行激励一个人的信息 try{ BufferedReader br = new BufferedReader(new FileReader(&amp;quot;D://test//User.txt&amp;quot;)); String user = br.readLine();//user表示一行记录 记录着账号和密码 while(user!=null){ //将user的信息按照-拆分 本别与方法的参数进行比较 String[] value = user.split(&amp;quot;-&amp;quot;);//value[0]账号 value[1]密码 if(value[0].equals(userName)){ if(value[1].equals(password)){ return &amp;quot;登录成功&amp;quot;; } } user = br.</description>
    </item>
    
    <item>
      <title>字符型文件流</title>
      <link>https://wangsong.site/notes/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%96%87%E4%BB%B6%E6%B5%81/</link>
      <pubDate>Sat, 23 Nov 2019 14:10:48 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%AD%97%E7%AC%A6%E5%9E%8B%E6%96%87%E4%BB%B6%E6%B5%81/</guid>
      <description>文件复制 public void copyFile(File file,String path){ FileInputStream fis = null; FileOutputStream fos = null; try { //创建一个输入流 fis = new FileInputStream(file); //创建一个新的file对象 File newFile = new File(path+&amp;quot;//&amp;quot;+file.getName()); fos = new FileOutputStream(newFile); byte[] b = new byte[1024];//通常创建的数组 1kb--8kb之间 int count = fis.read(b); while(count!=-1){ fos.write(b,0,count);//将读取的有效字节 写入 fos.flush(); count = fis.read(b); } System.out.println(&amp;quot;复制完毕&amp;quot;); } catch (IOException e) { e.printStackTrace(); }finally { try { if(fis!=null){ //保证健壮性 fis.close(); } } catch (IOException e) { e.</description>
    </item>
    
    <item>
      <title>字节型文件流</title>
      <link>https://wangsong.site/notes/%E5%AD%97%E8%8A%82%E5%9E%8B%E6%96%87%E4%BB%B6%E6%B5%81/</link>
      <pubDate>Fri, 22 Nov 2019 17:18:47 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%AD%97%E8%8A%82%E5%9E%8B%E6%96%87%E4%BB%B6%E6%B5%81/</guid>
      <description>流按照方向(功能)来区分
in(读取) out(写入)
操作的目标来区分
文件流 数组流 字符串流 数据流 对象流 网络流&amp;hellip;
学习文件流&amp;mdash;&amp;ndash;&amp;gt; 读取文件中的信息in 将信息写入文件中out
文件流按照读取或写入的单位大小(字节数)来区分
字节型文件流(1字节)
FileInputStream/FileOutputStream
字符型文件流(2字节&amp;ndash;1字节)
FileReader/FileWriter
字节型文件输入流 FileInputStream 1.包java.io 2.继承关系 InputStream类 字节型输入流的父类
3.创建对象
调用一个带File类型的的构造方法
调用一个带String类型的构造方法
4.常用方法
int code = read();每次从流管道中读取一个字节 返回字节的code码
int count = read(byte[]);每次从流管道中读取若干个字节 存入数组内 返回有效元素
int count = avaiable();返回流管道中海油多少缓存的字节数 skip(long n)跳过几个字节再读取
多线程&amp;mdash;&amp;mdash;&amp;gt;利用几个线程同时读取文件
close();//将流管道关闭&amp;mdash;-必须要做 最好放在finally里 注意代码的健壮性 判断严谨
//创建一个字节型的文件输入流 读取一个文件中的内容 File file = new File(&amp;quot;D://test//Test.txt&amp;quot;); FileInputStream fis = new FileInputStream(file);//真实去读文件 int code = fis.read();//读取一个字节 while(code!=-1){ System.out.println(code);//读取的字节对应的Unicode码 0---65535 code=fis.read(); }  FileInputStream fis = new FileInputStream(new File(&amp;quot;D://test//Test.</description>
    </item>
    
    <item>
      <title>IO之文件夹遍历删除</title>
      <link>https://wangsong.site/notes/io%E4%B9%8B%E6%96%87%E4%BB%B6%E5%A4%B9%E9%81%8D%E5%8E%86%E5%88%A0%E9%99%A4/</link>
      <pubDate>Fri, 22 Nov 2019 16:22:05 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/io%E4%B9%8B%E6%96%87%E4%BB%B6%E5%A4%B9%E9%81%8D%E5%8E%86%E5%88%A0%E9%99%A4/</guid>
      <description>1.文件夹的遍历&amp;mdash;&amp;mdash;-需要一个递归
循环 在方法中是正常执行的 只有一个方法执行空间
递归 调用时产生很多一样的临时空间 消耗内存
2.文件夹的删除
3.文件夹的路径(找父目录)
遍历文件夹输出路径 public void showFile(File file){ //获取file的子元素 files==null是个文件 files!=null是个文件夹 files.length!=0是个带元素的文件夹 File[] files = file.listFiles(); if(files!=null &amp;amp;&amp;amp; files.length!=0){ for(File f:files){ this.showFile(f); } } System.out.println(&amp;quot;file.getAbsolutePath()&amp;quot;); }  设计一个方法，删除文件夹 public viod delete(File file){ //判断file不是一个空文件夹 File[] files = file.listFiles(); if(files!=null &amp;amp;&amp;amp; files.length!=0){ for(File f:files){ this.deleteFile(f); } } //删除file(file是个文件夹或file是一个空文件夹) file.delete() }  文件流来完成&amp;mdash;&amp;mdash;&amp;gt;读取问价内容 将内容写入文件
4.文件的复制
5.文件的加密</description>
    </item>
    
    <item>
      <title>IO相关</title>
      <link>https://wangsong.site/notes/io%E4%B9%8Bfile%E7%B1%BB/</link>
      <pubDate>Fri, 22 Nov 2019 15:18:41 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/io%E4%B9%8Bfile%E7%B1%BB/</guid>
      <description>I/O相关 输入/输出 流(数据流动)
数据流动的方向 读数据(输入Input) 写数据(输出output)
文件流 字符流 数据流 对象流 网络流&amp;hellip;
1.什么叫文件
一种的电脑的存储形式
文件有不同的格式 .txt .doc .ppt .mp4 .jpg .rar &amp;hellip; 文件夹?&amp;mdash;&amp;ndash;目录路径
File&amp;mdash;&amp;mdash;&amp;gt;与电脑上的文件或文件夹产生一一对应的映射关系
File是一个类
1.java.io包中
2.文件或目录路径名的抽象表示形式
3.File与真实硬盘中的文件或文件夹 不是一个东西
File是在内存中的一个对象&amp;lt;&amp;mdash;映射&amp;mdash;&amp;gt;硬盘上的文件或文件夹 4.File类中的常用方法 canRead() canWrite() isHidden() isFile() isDirectory()
length()获取文件中字节的个数
lastModified()获取文件最后的修改时间&amp;mdash;&amp;gt;毫秒值
String path = getAbsolutePath()获取文件的绝对路径
绝对路径&amp;lt;&amp;mdash;&amp;ndash;&amp;gt;相对路径 绝对路径可以通过完整的字符串 定位盘符 文件夹 文件
相对路径没有盘符的写法 当前工程(项目)所在的位置找寻
String name = getName()获取文件的名字
boolean = createNewFile()创建新文件
boolean = mkdir()创建新文件夹 外层没有 不能创建
boolean = mkdirs()创建新的文件夹 外层没有 可以自动创建
String pname = getParent()获取当前file的父亲file名字
File file = getParentFile()获取当前file的父亲file对象</description>
    </item>
    
    <item>
      <title>错误与异常</title>
      <link>https://wangsong.site/notes/%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Fri, 22 Nov 2019 13:33:33 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E9%94%99%E8%AF%AF%E4%B8%8E%E5%BC%82%E5%B8%B8/</guid>
      <description>异常/错误 程序运行过程中，可能会发生一些不被期望的效果，肯定会阻止我们的程序按照指令去执行这种不被预期出现的效果，肯定需要抛出来告诉我们
在Java中有定义好的规则Throwable(可以抛出的)
Error错误 通常是一些物理的，JVM虚拟机本身出现的问题，程序指令是处理不了的
Exception异常 通常是一些认为规定的不正常的现象，通常是给定的程序指令产生了一些不符合规范的事情
 Throwable Error Exception StackOverflowError RuntimeException(运行时异常) OutOfMemoryError IOException  异常的分支体系
运行时异常(非检查异常) Error和RuntimeException都算作运行时异常 javac编译的时候，不会提示发现的 在程序编写时不要求必须做处理，如果我们愿意可以添加处理手段(try throws)
要求出现这样的时候 知道怎么产生及如何修改
1.InputMisMatchException 输入不匹配
int value = input.nextInt();// abc
2.NumberFormatException 数字格式化
int value = Integer.parseInt(&amp;ldquo;123.45&amp;rdquo;); 3.NegativeArraySizeException 数组长度负数
int[] array = new int[-2];
4.ArrayIndexOutOfBoundsException 数组索引越界
int[] array = {1,2,3}; array[5]; 5.NullPointerException 空指针异常
int[][] array = new int[3][]; array[0][0] = new 10; Person p = null; p.getName();
6.ArithmeticException 数字异常</description>
    </item>
    
    <item>
      <title>模拟BS服务器</title>
      <link>https://wangsong.site/notes/%E6%A8%A1%E6%8B%9Fbs%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Wed, 13 Nov 2019 17:41:17 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E6%A8%A1%E6%8B%9Fbs%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>分析 代码实现 import java.io.*; import java.net.ServerSocket; import java.net.Socket; /** * 创建BS版本TCP服务器 */ public class BSserver { public static void main(String[] args) throws IOException { //创建一个服务器ServerSocket，和系统要指定的端口 ServerSocket server = new ServerSocket(9090); //使用accept方法获取到请求的客户端对象(浏览器) Socket socket = server.accept(); //使用Socket对象中的方法getInputStream，获取网络字节输入流InputStream对象 InputStream is = socket.getInputStream(); //使用网络字节输入流InputStream对象中的方法read读取客户端的请求信息 /* byte[] bytes = new byte[1024]; int len = 0; while((len=is.read(bytes))!=-1){ System.out.println(new String(bytes,0,len)); }*/ //把is网络字节输入流对象，转换为字符缓冲输入流 BufferedReader br = new BufferedReader(new InputStreamReader(is)); //把客户端请求信息的第一行读取出来 GET /11_Net/web/index.html HTTP/1.1 String line = br.</description>
    </item>
    
    <item>
      <title>文件上传案例</title>
      <link>https://wangsong.site/notes/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Wed, 13 Nov 2019 15:55:06 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%A1%88%E4%BE%8B/</guid>
      <description>服务器 /** * 文件上传案例服务器端：读取客户端上传的文件，保存到服务器的硬盘，给客户端回写&amp;quot;上传成功&amp;quot; * &amp;lt;p&amp;gt; * 明确： * 数据源：客户端上传的文件 * 目的地：服务器的硬盘 d:\\upload\\1.jpg * &amp;lt;p&amp;gt; * 实现步骤： * 1.创建一个服务器ServerSocket对象，和系统要指定的端口 * 2.使用ServerSocket对象中的方法accept，获取到请求的客户端Socket对象 * 3.使用Socket对象中的方法getInputStream，获取到网络字节输入流InputStream对象 * 4.判断d:\\upload文件夹是否存在，不存在则创建 * 5.创建一个本地字节输出流FileOutputStream对象，构造方法中绑定要输出的目的地 * 6.使用网络字节输入流InputStream对象中的方法read，读取客户端上传的文件 * 7.使用本地字节输出流FileOutputStream对象中的方法write，把读取到的文件保存到服务器的硬盘上 * 8.使用Socket对象中的方法getOutputStream，获取到网络字节输出流OutputStream对象 * 9.使用网络字节输出流OutputStream对象中的方法write，给客户端回写&amp;quot;上传成功&amp;quot; * 10.释放资源(FileOutputStream,Socket,ServerSocket) */  代码 import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.net.ServerSocket; import java.net.Socket; import java.util.Random; public class Server { public static void main(String[] args) throws IOException { //1.创建一个服务器ServerSocket对象，和系统要指定的端口 ServerSocket server = new ServerSocket(8888); //2.</description>
    </item>
    
    <item>
      <title>工具类12 TreeMap&#43;考试系统练习</title>
      <link>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB12-treemap&#43;%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9F%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Sun, 10 Nov 2019 09:47:59 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB12-treemap&#43;%E8%80%83%E8%AF%95%E7%B3%BB%E7%BB%9F%E7%BB%83%E4%B9%A0/</guid>
      <description>TreeMap
1.java.util包
2.构造方法
无参数 带map参数
3.常用方法
put get remove replace size 4.底层数据结构的存储
红黑二叉树
考试系统 public class Main { public static void main(String[] args) { ExamMachine machine = new ExamMachine(); Scanner input = new Scanner(System.in); System.out.println(&amp;quot;欢迎进入考试系统\n请输入用户名&amp;quot;); String userName = input.nextLine(); System.out.println(&amp;quot;请输入密码&amp;quot;); String password = input.nextLine(); Student student =new Student(userName,password); String result = machine.logIn(student.getUserName(),student.getPassword()); if(result.equals(&amp;quot;登录成功&amp;quot;)){ System.out.println(&amp;quot;登录成功\n&amp;quot;+student.getUserName()+&amp;quot;开始考试啦，请认真作答&amp;quot;); ArrayList&amp;lt;Question&amp;gt; paper = machine.getPaper(); String[] answers = student.exam(paper); Teacher teacher = new Teacher(); int score = teacher.</description>
    </item>
    
    <item>
      <title>工具类11 HashMap</title>
      <link>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB11-hashmap/</link>
      <pubDate>Sun, 10 Nov 2019 09:47:22 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB11-hashmap/</guid>
      <description>Map 映射 通过某一个key可以直接定位到一个value值
存储方式以 键值对 存储 key-value
key无序无重复 value无序可重复
key无序还是一样，指的是存入顺序与取得顺序不一致
key无重复指的是 元素不能一致
1.map基本使用
HashMap TreeMap Properties(读取文件中的信息)
HashMap 1.包java.util
2.如何创建对象
3.基本方法
增删改查
增put(key,value) 存放一组映射关系 key-value
1.key存储的顺序与取得的顺序不同
2.不同的key可以存储相同的value
3.key若有相同的，则将原有的value覆盖而不是拒绝存入(跟set刚好相反)
删E = remove(key) 改put(key,value1) put(key,value2) replace(key,newValue) 查E = get(key) 遍历map集合？ key值不一定一样 ``` 获取到所有的key 便利key 通过key获取value //获取mp集合的所有key Set&amp;lt;k&amp;gt; keys = map.keySet(); //获取entry Set&amp;lt;Entry&amp;gt; = entrySet(); //通过迭代器遍历keys Itetator&amp;lt;K&amp;gt; it = keys.iterator(); while(it.hasNext()){ K key = it.next(); V value = map.get(key); } ``` size();  4.除了上述的常用的方法外，其他API中提供的方法</description>
    </item>
    
    <item>
      <title>工具类10 HashSet&#43;TreeSet</title>
      <link>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB10-hashset&#43;treeset/</link>
      <pubDate>Sun, 10 Nov 2019 09:47:05 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB10-hashset&#43;treeset/</guid>
      <description>1.集合的应用
集合就是一个小容器，增删改查
2.集合使用的情况
各集合的特点
3.底层原理
数据结构的存储方式
4.自己尝试实现
Set 1.具体的实现类
HashSet TreeSet
2.基本的使用
3.无序 无重复
无序：我们使用集合存放元素的顺序 集合内取出来的顺序不一样
集合本身有自己的算法排布顺序 hash算法
HashSet (底层为HashMap) 1.java.util
2.如何构造方法 无参数 有参数
3.集合容器的基本使用
增删改查 boolean = add(value) addAll(collection c) retainAll removeAll boolean = remove(Object) 没有修改方法 可以使用增强for进行集合遍历，也可以用迭代器 iterator() 获取一个迭代器对象 Iterator it = set.iterator();//Iterator接口 多态的效果 //判断下一个位置是否有元素 while(it.hashNext()){ String value = it.next(); System.out.println(value); } size()  4.无重复原则
equals() 和 HashCode()判断重复
public class Main{ public static void main(String[] args) { HashSet&amp;lt;String&amp;gt; stringSet = new HashSet(); stringSet.</description>
    </item>
    
    <item>
      <title>工具类9 LinkedList&#43;Vector&#43;Stack&#43;Queue</title>
      <link>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB9-linkedlist&#43;vector&#43;stack&#43;queue/</link>
      <pubDate>Sun, 10 Nov 2019 09:46:38 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB9-linkedlist&#43;vector&#43;stack&#43;queue/</guid>
      <description>Vector类 1.java.util包
2.是ArrayList集合的早期版本 (StringBuffer早期，Stringbuilder后来)
Vector底层也是利用(动态)数组的形式存储 Vector是线程同步的(synchronized)，安全性高，效率低
3.扩容机制与ArrayList不同，默认是扩容2倍 (ArrayList是1.5)，可以通过构造方式创建对象修改这一机制
4.构造方法
5.常用方法
Stack类 栈 1.java.util包
2.构造方法只有一个无参数 3.除了继承自Vector类的方法外还有几个特殊方法
 push(E e) 将某一个元素压如栈顶 E = pop() 将某一个元素从栈顶取出并删掉(E = remove()) E = peek() 查看栈顶的一个元素,不删除 boolean = empty() 判断栈顶元素是否为空 int = search() 查找给定的元素在栈中的位置  Queue接口 1.java.util
通常子类LinkedList,ArratDeque
2.通常无参数构造方法创建
3.一般方法
add()
element()&amp;mdash;&amp;gt;get()
remove()
boolean = offer(E e);//相当于add,可以处理异常 E = peek();//相当于 element方法 E = poll();//剪短,相当于remove()  LinkedList
List的子类，Queue的子类
1.java.uitl包 自己封装过的LinkedBox
2.底层使用双向链表的数据结构形式来存储，更适合插入和删除不适合遍历轮询
3.构建对象
无参数构造方法，单参数的构造方法(collection) ArrayList array = new ArrayList(); LinkedList linked = new LinkedList(array);</description>
    </item>
    
    <item>
      <title>工具类8 List集合</title>
      <link>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB8-list%E9%9B%86%E5%90%88/</link>
      <pubDate>Sun, 10 Nov 2019 09:45:58 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB8-list%E9%9B%86%E5%90%88/</guid>
      <description>集合： Collection 存储的都是value对象 List 有序可重复 Set 无序无重复 Map 存储的是以key-value形式存在，key无序无重复，value无序可重复  有序：添加进去的元素与取得元素的顺序一致。注意指的不是集合自己的顺序
重复：两个对象元素一致
List集合 1.ArrayList 2.LinkedList 3.Vector
ArrayList与Vector区别：类似于StringBuilder和StringBuffer
1.ArrayList&amp;ndash;&amp;gt;底层就是个数组(动态)
* 所属的包 jaba.util
* 特点是适合遍历查询，不适合插入删除 * 如何创建对象
无参数构造方法 、 带默认空间的构造方法 、 带collection参数的构造方法
* 常用方法&amp;mdash;&amp;mdash;小容器 CURD
存 add 取 get 删 remove 改 set 个数 size add(E e); add(int index,E e); addAll(Collection c); addAll(int index,Collection c)//c的类型需比list小 clear();//将集合内的全部元素清除 boolean = contains(Object);//找寻某一个给定的元素是否在集合中拥有 ensureCapacity(int miniCapacity); E = get(int index); int = indexOf(Object obj);lastIndexOf(); boolean = isEmpty(); Iterator = iterator();//迭代器 remove(int index);remove(Object obj); //ArrayList&amp;lt;Integer&amp;gt;--&amp;gt;1 2 3 //list.</description>
    </item>
    
    <item>
      <title>工具类7 StringBuffer&#43;StringBuilder&#43;Regex</title>
      <link>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB7-stringbuffer&#43;stringbuilder&#43;regex/</link>
      <pubDate>Sun, 10 Nov 2019 09:45:24 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB7-stringbuffer&#43;stringbuilder&#43;regex/</guid>
      <description>字符串相关的类 java.lang包
String  实现接口Serializable,CharSequence,Comparable
 非常特殊的类 可以像常量一样创建对象 String str=&amp;quot;abc&amp;quot;;
 内存存储 &amp;ldquo;abc&amp;rdquo;对象 char[] value
 String不可变特性 private final char[] value;
 频繁的修改其内容的时候，性能很不好
  StringBuffer/StringBuilder  所属的包 java.lang包
 默认继承AbstractStringBuilder 间接继承Object 实现接口 Serializable,CharSequence,Appendable
StringBuffer/StringBuilder 没有compareTo方法
StringBuffer/StringBuilder含有一个String没有的方法append(); 拼接
 特性
可变字符串 char[] value， 动态扩容
 对象的构建
//无参数构造方法 构建一个默认长度16个空间的对象 StringBuilder builder = new StringBuilder(); //利用给定的参数 构建一个自定义长度空间对象 char[] StringBuilder builder = new StringBuilder(20); //利用带String参数的构造方法 默认数组长度+16个 StringBuilder builder = new StringBuilder(&amp;quot;abc&amp;quot;);  StringBuilder中常用的方法</description>
    </item>
    
    <item>
      <title>工具类6 String常用方法练习</title>
      <link>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB6-string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Sun, 10 Nov 2019 09:44:47 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB6-string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E7%BB%83%E4%B9%A0/</guid>
      <description>小任务(以下任务要求设计成方法)
1.设计一个方法 将字符串反转 ok&amp;ndash;&amp;gt;ko
2.设计一个方法 将给定字符串的正序和反序进行连接 ok&amp;ndash;&amp;gt;okko
3.设计一个方法 判断给定字符串是否是回文 abccba abcba
4.设计一个方法 将给定字符串右移x位置 (helloword,2)&amp;ndash;&amp;gt;ldhellowor
5.设计一个方法 寻找若干字符串中最长的那个 ab,abc,abcd&amp;ndash;&amp;gt;abcd
6.设计一个方法 统计给定字母在字符串中出现的次数 &amp;ldquo;this is a test of java&amp;rdquo;,&amp;ldquo;a&amp;rdquo;&amp;ndash;&amp;gt;3
7.设计一个方法 将给定的字符串每一个首字母大写 &amp;ldquo;this is a test of java&amp;rdquo;&amp;ndash;&amp;gt;&amp;ldquo;This Is A Test Of Java&amp;rdquo;
8.设计一个方法 获取给定字符串中的全部数字 &amp;ldquo;za1o1zbp24tcq&amp;rdquo;&amp;ndash;&amp;gt;1124</description>
    </item>
    
    <item>
      <title>工具类5 String常用方法</title>
      <link>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB5-string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 10 Nov 2019 09:44:21 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB5-string%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description> boolean = equals(Object obj);//继承自Object,equals默认比较地址,被String重写了,比较两个字符串内容 int = hashCode();//继承自Object,被String重写,将当前字符串的每一个cahr元素拆开 乘以31求和 int = compareTo(String str);//实现自Comparable接口，按字典(Unicode编码)索引顺序比较 str1.compareTo(str2); //按照两个字符串长度较短的那个作为比较循环的次数 //挨个比较元素 str1[i]-str2[i]不为0就返回 //如果循环过后发现所有的字符都一样 len1-len2 //返回0表示两个字符相等 String = toString();//继承自Object,被String重写了,不在输出 类名@hashCode,而是字符串中的字面值 char = charAt(int index);//&amp;quot;abc&amp;quot; 0-&amp;gt;&#39;a&#39; //返回给定index对应位置的那个char值 int = codePointAt(int index);//&amp;quot;abc&amp;quot; 0-&amp;gt;97 //返回给定index对应位置的那个char所对应的code码 int = length();//返回字符串的长度(其实就是底层char[] value属性的长度) 注意:区别数组length是属性 String的length()为方法 集合size()为方法 String = concat(String);//将给定的字符串拼接在当前字符串之后 //此处要注意String对象的不可变特性 String str = &amp;quot;ab&amp;quot;; str = str.concat(&amp;quot;c&amp;quot;);//将str重新赋值才能得到&amp;quot;abc&amp;quot; //concat拼接字符串比+拼接性能高 String str = &amp;quot;a&amp;quot;+&amp;quot;b&amp;quot;+&amp;quot;c&amp;quot;+&amp;quot;d&amp;quot;;//数学计算 拼接符号 system.out.println(str);//过程中产生了几个String对象? 字符串常量池7个 //对象1-&amp;gt;value[] a &amp;quot;a&amp;quot; //对象2-&amp;gt;value[] b &amp;quot;b&amp;quot; //对象3-&amp;gt;value[] {a,b} &amp;quot;ab&amp;quot; //对象4-&amp;gt;value[] c &amp;quot;c&amp;quot; //对象5-&amp;gt;value[] {a,b,c} &amp;quot;abc&amp;quot; //对象6-&amp;gt;value[] d &amp;quot;d&amp;quot; //对象7-&amp;gt;value[] {a,b,c,d} &amp;quot;abcd&amp;quot; boolean = contains(CharSequence s);//判断给定的s是否在字符串中存在 starstWith(String prefix); endsWith(String suffix); //判断次字符串是否以xx开头/结尾 byte[] = getBytes(); char[] = toCharArray(); //将当前子字符串转化成数组 int = indexOf(int/String str[,int fromIndex]);//四个方法重载 //找寻给定的元素在字符串中第一次初选的索引位置,若字符串不存在则返回-1 int = lastIndexOf(int/String str[,int fronIndex]); //找寻给定的元素在字符串中最后一次出现的索引位置,若不存在则返回-1 boolean = isEmpty(); //判断当前字符串是否为空字符串(length是否为0) //注意与null之间的区别 replace(target,replacement); replaceAll(target,replacement);//前两个所有出现的都能换 replaceFirst(target,replacement);//第三个只换第一次出现的 //将给定的字符串替换成另外的字符串 String[] = split(String regex[,int limit]);//按照给定的表达式将原来的字符串拆分开 &amp;quot;a-b-c-d&amp;quot; &amp;quot;-&amp;quot; String = substring(int beginIndex[,int endIndex]); //[beginIndex,endIndex) //将当前的字符串截取一部分,若ebdIndex不写 则默认到字符串最后 String = tpUpperCase(); String = tpLowerCase(); //将全部字符串转换成大写/小写 String = trim(); //去掉字符串前后多余的空格 boolean = matches(String regex);//匹配正则表达式 //regular expression 正则表达式  </description>
    </item>
    
    <item>
      <title>工具类4 String不可变特性及常用方法</title>
      <link>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB4-string%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%89%B9%E6%80%A7%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 10 Nov 2019 09:43:49 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB4-string%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%89%B9%E6%80%A7%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
      <description>String类-&amp;gt;引用类型 java.lang包
常见的String笔试题 == equals方法的区别 String的不可变特性 StringBuffer与StringBuilder区别 String对象的存储 String中常用的方法*  1. 存在哪 java.lang包 没有任何继承关系，实现三个接口 Serializable,CharSequence,Comparable&amp;lt;&amp;gt;
2. 如何构建对象  String str = &amp;quot;abc&amp;quot;;//直接将字符串常量赋值给str (字符串常量池) String str = new String();//String str = &amp;quot;&amp;quot;;无参数构造方法创建空的对象 String str = new String(&amp;quot;abc&amp;quot;);//String str = &amp;quot;abc&amp;quot;;带String参数的构造方法创建对象 String str = new String(byte[]);//将数组中的每一个元素转化成对应的char 组合成String String str = new String(char[]);//将数组中的每一个char元素拼接成String String str = new String(&amp;quot;hello&amp;quot;,1,3);//str=&amp;quot;ell&amp;quot;; String的重载，从一号向右偏移三位拼接  3. == equals方法的区别  ==可以比较基本类型，可以比较引用类型。比较基本类型比较值，比较引用类型比较地址 equals只能比较引用类型(方法)，默认比较地址this==obj。如果想要改变其比较规则，可以重写equals方法。通常重写equals方法时会伴随着重写hashCode方法  4. String的不可变特性*  体现在两个地方:长度和内容 private final char value[]; // 在String类中包含一个数组value,存储String中的每一个字符 长度-&amp;gt;final修饰的数组,数组长度本身不变,final修饰数组的地址也不变 内容-&amp;gt;private修饰的属性,不能在类的外部访问  5.</description>
    </item>
    
    <item>
      <title>工具类3 日期相关&#43;String</title>
      <link>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB3-%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3&#43;string/</link>
      <pubDate>Sun, 10 Nov 2019 09:43:16 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB3-%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3&#43;string/</guid>
      <description>System类 1.属于java.lang包
2.in out 对象属性 long time = currentTimeMillis(); 获取当前系统时间-&amp;gt;1970-1-1 与当前的时间差,毫秒形式
1.Date类 java.util包(java.sql)</description>
    </item>
    
    <item>
      <title>工具类2 数学相关</title>
      <link>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB2-%E6%95%B0%E5%AD%A6%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 10 Nov 2019 09:42:47 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB2-%E6%95%B0%E5%AD%A6%E7%9B%B8%E5%85%B3/</guid>
      <description>包装类 数学相关 日期相关 字符串相关 集合相关 异常相关 I/O相关 线程相关 网络相关 反射相关 GUI相关
与数学相关的类 1.所属的包java.lang
2.Math构造方法是私有的，我们不能直接调用创建对象
3.由于Math中提供的属性及方法都是static，不需要创建对象
4.常用方法
abs(*) int //给定数字的绝对值 ceil(Double) int //向上取整 floor(Double) int //向下取整 rint(Double) int //临近的整数，如果两边距离一样则返回偶数 round(Double) int //四舍五入 max(a,b); min(a,b); //int long float double 最大最小值 pow(a,b); //a的b次方(参数double 返回值double) sqrt(a); //取平方根 double = random(); //随机产生一个[0.0~1.0)  5.Math.random()计算小数的时候精确度可能会有些损失
0~9之间的随机整数 int value = (int)(Math.random()*10); 5.0~10.9之间的小数 (Math.random()*6)+5 0.0~0.999999 *6 --&amp;gt;0.0~5.49999  Random类 1.在java.util包中的类，需要import导入
2.没有任何继承 关系，默认继承Object
3.查找构造方法&amp;mdash;&amp;gt;如何创建对象
Random r = new Random();  4.</description>
    </item>
    
    <item>
      <title>工具类1 包装类</title>
      <link>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB1-%E5%8C%85%E8%A3%85%E7%B1%BB/</link>
      <pubDate>Sun, 10 Nov 2019 09:42:00 +0800</pubDate>
      
      <guid>https://wangsong.site/notes/%E5%B7%A5%E5%85%B7%E7%B1%BB1-%E5%8C%85%E8%A3%85%E7%B1%BB/</guid>
      <description>研究内容  类所在的包 类的关系,自己默认继承,实现 类中提供的常用方法 是否可以创建对象,调用,方法本身静态  包装类(封装类) byte---Byte short---Short int---Integer long---Long float---Float double---Double char---Character boolean---Boolean   八个包装类都在同一个包下java.lang包, 不需要import导包直接使用
 八个包装类中有六个是与数字相关的,都默认继承父类Number
 八个包装类都实现了Serializable,Comparable接口
 八个包装类都有带自己对应类型参数的构造方法 八个包装类中有七个(除了Character)还有构造方法重载 带String类型
new Interger(10); new Interger(&amp;quot;10&amp;quot;);  创建对象 对象调用方法
有六个是与数字相关的类继承Number xxxValue(); 将一个包装类类型转化为对应的基本类型(拆包)
Integer i1 = new Integer(10);//引用数据类型 包装类 int value = i1.intValue(); //1.5版本之后 自动拆装包 Integer i2 = 10; int value = new Integer(10); //两种方法将String转化为int int value = Integer.parseInt(&amp;quot;123&amp;quot;); int value = new Integer(&amp;quot;123&amp;quot;);  经常在笔试中出现的问题</description>
    </item>
    
    <item>
      <title>Java、Maven的包管理</title>
      <link>https://wangsong.site/posts/javamaven%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 29 Oct 2019 11:53:59 +0800</pubDate>
      
      <guid>https://wangsong.site/posts/javamaven%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
      <description> Java的包管理机制 包管理的本质就是告诉JVM如何找到所需的第三方类库，以及成功地解决其中的冲突问题。
JVM的包管理机制非常简单：
 JVM一辈子只干一件事，读字节码文件，执行字节码。 每当JVM看到一个全限定类名，就尝试从classpath中加载。  要找一个类就在-classpath所指定的jar包(一堆类的压缩包)或文件夹中按照全限定类名(目录层级)挨个查找，找到为止，找不到就会丢出一个ClassNotFoundExeption。
当多个同名类同时出现在classpath中，JVM就只会加载放在前面的类，导致了放在后面的想要使用的类得不到使用，这就是Classpath hell。
由于传递性依赖，我们依赖的类可能还依赖类其他的类，classpath中会将所有依赖的类引用进来，这就导致classpath非常长，要解决Classpath hell，人工寻找classpath中的同名类非常困难，这就需要借助自动化工具来实现。
Maven的包管理机制 Maven的仓库
 Maven的中央仓库：按照一定的约定存储包 Maven的本地仓库：默认位于~/.m2,下载的第三方包放在这里进行缓存  Maven按照约定为所有的包编号：groupId/artifactId/version，方便检索。
当我们需要一个包时，Maven按照我们给出的编号，去仓库查找这个包，并根据依赖找到所有的包下载到本地，然后拼接成一个很长的classpath，以供JVM查找加载。
作为依赖性的自动管理工具，Maven绝对不允许最终的classpath出现同名不同版本的jar包，其解决依赖冲突的原则是：距离本项目最近的胜出 。 但这一原则并不能总是让我们得到需要的包，当看到这些异常的的时候，说明Maven解决不了这个包冲突，需要靠手动解决。
AbstractMethodError NoClassDefFoundError ClassNotFoundException LinkageError  包管理冲突的解决 以运行一个程序得到如下异常为例:
首先对冲突的包进行定位，可以从Maven的Dependency中找到对应的两个包，可以看到此项目中只有两个org.springframework:spring-web的包，5.1.8版本不受其他包所依赖，距离本项目较4.3.6版本更近，所以Maven是采用了5.1.8版本，所以我们可以很快地定位到运行项目缺失的类方法是在4.3.6版本中。
但是，如果这里发生冲突的包不止有两个呢？这时，就需要到Maven的中央仓库去查看源码进行定位了。
定位到了发生冲突的包，那么接下来就该解决问题了。
方法一 在最近处添加一个新的包 在pom.xml文件中引入一个4.3.6版本的dependency即可
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.3.6.RELEASE&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;  方法二 消除与其冲突的包 如果5.1.8版本包不被其他包所依赖，直接在pom.xml文件中将其dependency删去或者注释掉即可；如果5.1.8版本包受其他包所依赖，可在上级包的dependency中添加如下内容即可将5.1.8版本包从其中排除不受依赖。
&amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt;  </description>
    </item>
    
    <item>
      <title>MyPage</title>
      <link>https://wangsong.site/mypage/</link>
      <pubDate>Mon, 28 Oct 2019 12:35:52 +0800</pubDate>
      
      <guid>https://wangsong.site/mypage/</guid>
      <description> hello </description>
    </item>
    
    <item>
      <title>如何使用Hugo搭建个人博客</title>
      <link>https://wangsong.site/posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 28 Oct 2019 10:55:57 +0800</pubDate>
      
      <guid>https://wangsong.site/posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>Hugo是由Go语言实现的静态网站生成器，可以快速搭建一套静态展示类型的网站。并且自带高性能服务器，热部署等特性，是不想多花精力又想构建个人博客的极佳选择。本文将介绍如何使用Hugo搭建个人博客及如何发布到Github并生成Github pages。
快速搭建博客 进入Hugo 官网，点击Quick Start快速开始。
安装Hugo Windows安装方式  去Hugo releases页面下载hugo_xxx_Windows-64bit.zip 解压，把hugo.exe放到D:\Software\hugo\hugo.exe 把D:\Software\hugo加到PATH 重启终端，运行hugo version 查看版本  Mac安装方式  brew install hugo hugo version  建立新站点 输入命令
hugo new site github.io-creator  在当前文件夹中创建一个新的Hugo网站github.io-creator。
添加主题 依次输入下面四条命令，下载并使用主题ananke。
cd github.io-creator git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml  更换主题可到Hugo的官方网站浏览下载。
创建文章 输入命令
hugo new posts/我的博客.md  Hugo会在content目录下创建post目录，在post目录下创建scala-learning-pattern-matching.md文件。之后打开md文件，里面已经有些内容：
这里的的draft默认状态为true,需要修改为false才能发布。
查看生成的文章 草稿状态下 输入命令hugo server -D
非草稿状态下 输入hugo server
可得到如下结果：</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://wangsong.site/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangsong.site/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>a 标签 属性  href target download rel=noopener  作用  跳转外部页面 跳转内部锚点 跳转到邮箱或电话等  a 的 href 的取值 网址  https://google.com http://google.com //google.com  路径  /a/b/c 以及 a/b/c index.html 以及 ./index.html  伪协议  javascript:代码; mailto:邮箱 tel:手机号 (注意逗号和分号)  id  href=#xxx  注：href=&amp;ldquo;javascript:;&amp;rdquo; 什么都不做的伪协议，点击后页面不会刷新，也不会回到顶部
href=&amp;ldquo;#xxx&amp;rdquo; 跳转到指定 id 的标签
a 的 target 的取值 内置名字  _blank 在新的页面打开 _top 最顶层页面打开 _parent 在父级页面打开 _self 默认值，在当前页面打开  程序员命名  window 的 name iframe 的 name  a 的 download 作用  不是打开页面，而是下载页面  问题  不是所有浏览器都支持，尤其是手机浏览器不可能支持  table 标签 相关的 table  table thead tbody tfoot tr td th  table 标签里面只能使用三个标签 thead tbody tfoot</description>
    </item>
    
  </channel>
</rss>