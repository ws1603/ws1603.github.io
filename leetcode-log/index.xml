<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode-logs on 小松的学习笔记</title>
    <link>https://wangsong.site/leetcode-log/</link>
    <description>Recent content in Leetcode-logs on 小松的学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Sat, 04 Apr 2020 14:13:12 +0800</lastBuildDate>
    
	<atom:link href="https://wangsong.site/leetcode-log/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Words</title>
      <link>https://wangsong.site/leetcode-log/words/</link>
      <pubDate>Sat, 04 Apr 2020 14:13:12 +0800</pubDate>
      
      <guid>https://wangsong.site/leetcode-log/words/</guid>
      <description>Unit 1 secure
gear
suite
suit
decay
retreat
preach
counter
rebel
counteract
counterpart
agent
delegate
deputy
quantitative
Unit 2 appropriate
controversy
dispute
quarrelsome
avail
peculiar
speciality
hedge
benefit
reclaim
proclaim
allege
assert
profess
communicate
community
regarding
expenditure
contribute
delicate
enterprise
Unit 3 cultivate
nurture
nourish
civil
savage
literally
decline
descent
finite
infinite
exemplify
manifest
depict
portray
specify
directory
immediate
Unit 4 motion
incentive
monetary
appliance
applicable
utilize/ise
exploit
critical</description>
    </item>
    
    <item>
      <title>1.两数之和</title>
      <link>https://wangsong.site/leetcode-log/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Fri, 03 Apr 2020 14:55:48 +0800</pubDate>
      
      <guid>https://wangsong.site/leetcode-log/1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>通过率：48.0%
题目描述  给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 
示例：  给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1] 
执行用时108ms 内存消耗40.1MB ↓
class Solution { public int[] twoSum(int[] nums, int target) { for(int i=0;i&amp;lt;nums.length;i++){ for(int j=i+1;j&amp;lt;nums.length;j++){ if(target==nums[i]+nums[j]){ return new int[]{i,j}; } } } return new int[]{}; } }  执行用时39ms 内存消耗37.2MB ↓</description>
    </item>
    
  </channel>
</rss>