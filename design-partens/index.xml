<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design-partens on 小松的学习笔记</title>
    <link>https://wangsong.site/design-partens/</link>
    <description>Recent content in Design-partens on 小松的学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Sat, 04 Apr 2020 12:23:43 +0800</lastBuildDate>
    
	<atom:link href="https://wangsong.site/design-partens/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>学习目标</title>
      <link>https://wangsong.site/design-partens/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/</link>
      <pubDate>Sat, 04 Apr 2020 12:23:43 +0800</pubDate>
      
      <guid>https://wangsong.site/design-partens/%E5%AD%A6%E4%B9%A0%E7%9B%AE%E6%A0%87/</guid>
      <description>面向对象的三大特性  封装：隐藏内部实现 继承：复用现有代码 多态：改写对象行为  面向对象设计基本原则：SOLID原则  单一责任原则 The Single Responsibility Principle 开放封闭原则 The Open Closed Principle
 里氏替换原则 Liskov Substitution Principle
 接口分离原则 The Interface Segregation Principle
 依赖倒置原则 The Dependency Inversion Principle
  6种类的关系 23种模式-GOF核心设计模式  创建型模式：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式
 结构型模式：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式 行为型模式：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式
  什么是设计模式  &amp;ldquo;每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动。&amp;rdquo; -Christopher Alexander
 为什么要用设计模式 由于产品需求、开发团队、技术框架、市场环境等的变化，设计面向对象软件比较困难，设计可复用的面向对象软件难上加难。有了变化怎么办？改呗！要是能少改点就好了，于是有了可复用。</description>
    </item>
    
  </channel>
</rss>